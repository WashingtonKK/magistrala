version: v1.0
name: CI Pipeline
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu2004
auto_cancel:
  running:
    when: branch != 'master'
global_job_config:
  prologue:
    commands:
      - checkout
      - sem-version go 1.20


blocks:
  - name: Setup
    dependencies: []
    task:
      jobs:
        - name: Setup Linter
          commands:
            - 'curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.53.3'
            - ./bin/golangci-lint version
            - cache store linter ./bin/golangci-lint
        - name: Setup Codecov
          commands:
            - curl -Os https://uploader.codecov.io/latest/linux/codecov
            - chmod +x codecov
            - ./codecov  
            - cache store codecov ./codecov          
  
  - name: Setup Protobuf
    dependencies: []
    run:
      when: 'change_in([''/things/policies/auth.proto'', ''/users/policies/auth.proto''], {pipeline_file: ''ignore''})'
    task:
      jobs:
        - commands:
            - |
              setup_protoc() {
                PROTOC_ZIP=protoc-$PROTOC_VERSION-linux-x86_64.zip
                curl -0L https://github.com/google/protobuf/releases/download/v$PROTOC_VERSION/$PROTOC_ZIP -o $PROTOC_ZIP
                unzip -o $PROTOC_ZIP -d protoc3
                sudo mv protoc3/bin/* /usr/local/bin/
                sudo mv protoc3/include/* /usr/local/include/
                rm -f $PROTOC_ZIP
                go install google.golang.org/protobuf/cmd/protoc-gen-go@$PROTOC_GEN_VERSION
                go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@$PROTOC_GRPC_VERSION
                export PATH=$PATH:/usr/local/bin/protoc
                export PATH=$PATH:$HOME/go/bin
              }
            - setup_protoc
            - |
              for p in $(ls pkg/*/*.pb.go); do
                mv $p $p.tmp
              done     
            - protoc -I. --go_out=. --go_opt=paths=source_relative pkg/messaging/*.proto
            - protoc -I. --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative users/policies/*.proto
            - protoc -I. --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative things/policies/*.proto
            - "for p in $(ls pkg/*/*.pb.go); do\n  if ! cmp -s $p $p.tmp; then\n  \techo \"Proto file and generated Go file $p are out of sync!\"\n  \texit 1\n \tfi\ndone \n"
            - echo "Compile check for rabbitmq..."
            - MF_BROKER_TYPE=rabbitmq make http
          name: Setup Protobuf  
#MQTT    
  - name: Lint and Test MQTT
    dependencies:
      - Setup
      - Setup Protobuf
    run:
      when: "change_in('/mqtt/', {pipeline_file: ''ignore''})"     
    task:
      jobs:
        - name: Lint MQTT
          commands:
            - cd mqtt
            - cache restore linter
            - ls -a
            - './bin/golangci-lint run --no-config --disable-all --enable gosimple,errcheck,govet,unused,goconst,godot --timeout 3m'
        - name: Test MQTT
          commands:
            - cd mqtt
            - go test ./... --race -v -coverprofile=coverage.out
            - go tool cover -html=coverage.out -o coverage.html
            - cache restore codecov
            - ./codecov
      env_vars: []
  - name: Push MQTT
    dependencies:
      - Lint and Test MQTT
    run:
      when: 'change_in(''/mqtt/'', {pipeline_file: ''ignore''})'
    task:
      jobs:
        - commands:
            - make mqtt
            - docker push mainflux/mqtt
          name: Push MQTT
  - name: Lint and Test HTTP
    dependencies:
      - Setup Protobuf
    run:
      when: 'change_in(''/mqtt/'', {pipeline_file: ''ignore''})'  
    task:
      jobs:
        - name: Lint HTTP
          commands:
            - cd http
            - cache restore linter
            - ls -a
            - './bin/golangci-lint run --no-config --disable-all --enable gosimple,errcheck,govet,unused,goconst,godot --timeout 3m'
        - name: Test HTTP
          commands:
            - cd http
            - go test ./... --race -v -coverprofile=coverage.out
            - go tool cover -html=coverage.out -o coverage.html
            - cache restore codecov
            - ./codecov            
  - name: Push HTTP
    dependencies:
      - Lint and Test HTTP
    run:
      when: 'change_in(''/http/'', {pipeline_file: ''ignore''})'
    task:
      jobs:
        - commands:
            - make http
            - docker push mainflux/http
          name: Push HTTP

  - name: Test all
    dependencies:
      - Setup Protobuf
    run:
      when: "branch = 'master'"
    task:
      jobs:
        - commands:
            - make test
          name: All test

  - name: Lint and Test WS
    dependencies: []
    run:
      when: 'change_in(''/ws/'', {pipeline_file: ''ignore''})'      
    task:
      jobs:
        - name: Lint WS
          commands:
            - cd ws
            - cache restore linter
            - ls -a
            - './bin/golangci-lint run --no-config --disable-all --enable gosimple,errcheck,govet,unused,goconst,godot --timeout 3m'
        - name: Test WS
          commands:
            - cd ws
            - go test ./... --race -v -coverprofile=coverage.out
            - go tool cover -html=coverage.out -o coverage.html   
            - cache restore codecov
            - ./codecov               
  - name: Push WS
    dependencies:
      - Lint and Test WS
    run:
      when: "change_in('/ws/', {pipeline_file: 'ignore'})"
    task:
      jobs:
        - commands:
            - make ws
            - docker push mainflux.ws
          name: Push Ws

  - name: Lint and Test CoAp
    dependencies: []
    run:
      when: 'change_in(''/coap/'', {pipeline_file: ''ignore''})'      
    task:
      jobs:
        - name: Lint CoAp
          commands:
            - cd coap
            - cache restore linter
            - ls -a
            - './bin/golangci-lint run --no-config --disable-all --enable gosimple,errcheck,govet,unused,goconst,godot --timeout 3m'
        - name: Test CoAp
          commands:
            - cd coap
            - go test ./... --race -v -coverprofile=coverage.out
            - go tool cover -html=coverage.out -o coverage.html     
            - cache restore codecov
            - ./codecov             
  - name: Push CoAp
    dependencies:
      - Lint and Test CoAp
    run:
      when: "change_in('/coap/', {pipeline_file: 'ignore'})"
    task:
      jobs:
        - commands:
            - make coap
            - docker push mainflux/coap
          name: Push Coap

  - name: Lint and Test Twins
    dependencies: []
    run:
      when: 'change_in(''/twins/'', {pipeline_file: ''ignore''})'      
    task:
      jobs:
        - name: Lint Twins
          commands:
            - cd twins
            - cache restore linter
            - ls -a
            - './bin/golangci-lint run --no-config --disable-all --enable gosimple,errcheck,govet,unused,goconst,godot --timeout 3m'
        - name: Test Twins
          commands:
            - cd twins
            - go test ./... --race -v -coverprofile=coverage.out
            - go tool cover -html=coverage.out -o coverage.html    
            - cache restore codecov
            - ./codecov                
  - name: Build Twins
    dependencies:
      - Lint and Test Twins
    run:
      when: "change_in('/twins', {pipeline_file: 'ignore'})"
    task:
      jobs:
        - commands:
            - make twins
            - docker push mainflux/twins
          name: Push Twins

  - name: Lint and Test Users
    dependencies: []
    run:
      when: "change_in('/users/', {pipeline_file: 'ignore'})"    
    task:
      jobs:
        - name: Lint Users
          commands:
            - cd users
            - cache restore linter
            - ls -a
            - './bin/golangci-lint run --no-config --disable-all --enable gosimple,errcheck,govet,unused,goconst,godot --timeout 3m'
            - cache restore codecov
            - ./codecov            
        - name: Test Users
          commands:
            - cd users
            - go test ./... --race -v -coverprofile=coverage.out
            - go tool cover -html=coverage.out -o coverage.html     
  - name: Push Users
    dependencies:
      - Lint and Test Users
    run:
      when: "change_in('/users/', {pipeline_file: 'ignore'})"
    task:
      jobs:
        - commands:
            - make users
            - docker push mainflux/users
          name: Build Users

  - name: Lint and Test Things
    dependencies: []
    run:
      when: "change_in('/things', {pipeline_file: 'ignore'})"    
    task:
      jobs:
        - name: Lint Things
          commands:
            - cd things
            - cache restore linter
            - ls -a
            - './bin/golangci-lint run --no-config --disable-all --enable gosimple,errcheck,govet,unused,goconst,godot --timeout 3m'
        - name: Test Things
          commands:
            - cd things
            - go test ./... --race -v -coverprofile=coverage.out
            - go tool cover -html=coverage.out -o coverage.html  
            - cache restore codecov
            - ./codecov                 
  - name: Push Things
    dependencies:
      - Lint and Test Things
    run:
      when: "change_in('/things', {pipeline_file: 'ignore'})"
    task:
      jobs:
        - commands:
            - make things
            - docker push mainflux/things
          name: Push Things

  - name: Lint and Test LoRa
    dependencies: []
    run:
      when: "change_in('/lora', {pipeline_file: 'ignore'})"
    task:
      jobs:
        - name: Lint LoRa
          commands:
            - cd lora
            - cache restore linter
            - ls -a
            - './bin/golangci-lint run --no-config --disable-all --enable gosimple,errcheck,govet,unused,goconst,godot --timeout 3m'
        - name: Test Lora
          commands:
            - cd lora
            - go test ./... --race -v -coverprofile=coverage.out
            - go tool cover -html=coverage.out -o coverage.html
            - cache restore codecov
            - ./codecov            
  - name: Push LoRa
    dependencies:
      - Lint and Test LoRa
    run:
      when: "change_in('/lora', {pipeline_file: 'ignore'})"
    task:
      jobs:
        - commands:
            - make lora
            - docker push mainflux/lora
          name: Push LoRa

  - name: Lint and Test Consumers
    dependencies: []
    run:
      when: "change_in('/consumers', {pipeline_file: 'ignore'})"    
    task:
      jobs:
        - name: Lint Consumers
          commands:
            - cd mqtt
            - cache restore linter
            - ls -a
            - './bin/golangci-lint run --no-config --disable-all --enable gosimple,errcheck,govet,unused,goconst,godot --timeout 3m'
        - name: Test Consumers
          commands:
            - cd consumers
            - go test ./... --race -v -coverprofile=coverage.out
            - go tool cover -html=coverage.out -o coverage.html
            - cache restore codecov
            - ./codecov            
  - name: Push Consumers
    dependencies:
      - Lint and Test Consumers
    run:
      when: "change_in('/consumers', {pipeline_file: 'ignore'})"
    task:
      jobs:
        - commands:
            - make consumers
            - docker push mainflux/consumers
          name: Build Consumers

  - name: Lint and Test Logger
    dependencies: []
    run:
      when: "change_in('/logger', {pipeline_file: 'ignore'})"    
    task:
      jobs:
        - name: Lint Logger
          commands:
            - cd logger
            - cache restore linter
            - ls -a
            - './bin/golangci-lint run --no-config --disable-all --enable gosimple,errcheck,govet,unused,goconst,godot --timeout 3m'
        - name: Test Mqtt
          commands:
            - cd logger
            - go test ./... --race -v -coverprofile=coverage.out
            - go tool cover -html=coverage.out -o coverage.html
            - cache restore codecov
            - ./codecov            
  - name: Push Logger
    dependencies:
      - Lint and Test Logger
    run:
      when: "change_in('/logger', {pipeline_file: 'ignore'})"
    task:
      jobs:
        - commands:
            - make logger
            - docker push mainflux/logger
          name: Push Logger

  - name: Lint and Test Certs
    dependencies: []
    run:
      when: "change_in('/certs', {pipeline_file: 'ignore'})"    
    task:
      jobs:
        - name: Lint Certs
          commands:
            - cd certs
            - cache restore linter
            - ls -a
            - './bin/golangci-lint run --no-config --disable-all --enable gosimple,errcheck,govet,unused,goconst,godot --timeout 3m'
        - name: Test Certs
          commands:
            - cd certs
            - go test ./... --race -v -coverprofile=coverage.out
            - go tool cover -html=coverage.out -o coverage.html
            - cache restore codecov
            - ./codecov            
  - name: Push Certs
    dependencies:
      - Lint and Test Certs
    run:
      when: "change_in('/certs', {pipeline_file: 'ignore'})"
    task:
      jobs:
        - commands:
            - make certs
            - docker push mainflux/certs
          name: Push Certs

  - name: Lint and Test Bootstrap
    dependencies: []
    run:
      when: "change_in('/bootstrap', {pipeline_file: 'ignore'})"    
    task:
      jobs:
        - name: Lint Bootstrap
          commands:
            - cd bootstrap
            - cache restore linter
            - ls -a
            - './bin/golangci-lint run --no-config --disable-all --enable gosimple,errcheck,govet,unused,goconst,godot --timeout 3m'
        - name: Test Bootstrap
          commands:
            - cd bootstrap
            - go test ./... --race -v -coverprofile=coverage.out
            - go tool cover -html=coverage.out -o coverage.html
            - cache restore codecov
            - ./codecov            
  - name: Build Bootstrap
    dependencies:
      - Lint and Test Bootstrap
    run:
      when: "change_in('/bootstrap', {pipeline_file: 'ignore'})"
    task:
      jobs:
        - commands:
            - make bootstrap
            - docker push mainflux/bootstrap
          name: Push Bootstrap

