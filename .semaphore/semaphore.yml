version: v1.0
name: CI Pipeline
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu2004
global_job_config:
  epilogue:
    always:
      commands:
        - '[[ -f report.xml ]] && test-results publish report.xml'
blocks:
  - name: Setup
    task:
      env_vars:
        - name: GO_VERSION
          value: 1.16.7
      jobs:
        - name: Variables
          commands:
            - NPROC=$(nproc)
            - GO_VERSION=1.19.4
            - PROTOC_VERSION=21.12
            - PROTOC_GEN_VERSION=v1.28.1
            - PROTOC_GRPC_VERSION=v1.2.0
        - name: Update Go
          commands:
            - |
              function version_gt() {
                test "$(printf ''%s\n'' "$@" | sort -V | head -n 1)" != "$1"
              }
            - |
              CURRENT_GO_VERSION=$(go version | sed 's/[^0-9.]*\([0-9.]*\).*/\1/')
            - |
              if version_gt $GO_VERSION $CURRENT_GO_VERSION; then
                echo "Updating go version from $CURRENT_GO_VERSION to $GO_VERSION ..."
                sudo rm -rf /usr/bin/go
                sudo rm -rf /usr/local/go
                sudo rm -rf /usr/local/bin/go
                sudo rm -rf /usr/local/golang
                sudo rm -rf $GOROOT $GOPATH $GOBIN
                wget https://go.dev/dl/go$GO_VERSION.linux-amd64.tar.gz
                sudo tar -C /usr/local -xzf go$GO_VERSION.linux-amd64.tar.gz
                export GOROOT=/usr/local/go
                export PATH=$PATH:/usr/local/go/bin
              fi
            - export GOBIN=$HOME/go/bin
            - 'export PATH=$PATH:$GOBIN'
      prologue:
        commands:
          - ls
          - ls
      epilogue:
        always:
          commands:
            - ls
        on_pass:
          commands:
            - echo "Success"
        on_fail:
          commands:
            - echo "Failure"
    dependencies: []
  - name: Protoc setup
    task:
      jobs:
        - name: Setup MF
          commands:
            - checkout
            - |
              setup_protoc() {
                echo "Setting up protoc..."
                PROTOC_ZIP=protoc-$PROTOC_VERSION-linux-x86_64.zip
                curl -0L https://github.com/google/protobuf/releases/download/v$PROTOC_VERSION/$PROTOC_ZIP -o $PROTOC_ZIP
                unzip -o $PROTOC_ZIP -d protoc3
                sudo mv protoc3/bin/* /usr/local/bin/
                sudo mv protoc3/include/* /usr/local/include/
                rm -f $PROTOC_ZIP
                go install google.golang.org/protobuf/cmd/protoc-gen-go@$PROTOC_GEN_VERSION
                go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@$PROTOC_GRPC_VERSION
                export PATH=$PATH:/usr/local/bin/protoc
                export PATH=$PATH:$HOME/go/bin
              }
            - echo "$NPROC"
            - setup_protoc
            - protoc
            - |
              for p in $(ls pkg/*/*.pb.go); do
                mv $p $p.tmp
              done     
            - go env GOBIN
            - which protoc-gen-go
            - protoc -I. --go_out=. --go_opt=paths=source_relative pkg/messaging/*.proto
            - protoc -I. --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative users/policies/*.proto
            - protoc -I. --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative things/policies/*.proto
            - "for p in $(ls pkg/*/*.pb.go); do\n  if ! cmp -s $p $p.tmp; then\n  \techo \"Proto file and generated Go file $p are out of sync!\"\n  \texit 1\n \tfi\ndone \n"
            - echo "Compile check for rabbitmq..."
            - MF_BROKER_TYPE=rabbitmq make http
            - make -j$NPROC
      prologue:
        commands:
          - NPROC=$(nproc)
          - GO_VERSION=1.19.4
          - PROTOC_VERSION=21.12
          - PROTOC_GEN_VERSION=v1.28.1
          - PROTOC_GRPC_VERSION=v1.2.0
      env_vars: []
    dependencies:
      - Setup
  - name: Lint
    dependencies:
      - Setup
    task:
      jobs:
        - name: Linting
          commands:
            - |
              function version_gt() {
                test "$(printf ''%s\n'' "$@" | sort -V | head -n 1)" != "$1"
              }
            - |
              CURRENT_GO_VERSION=$(go version | sed 's/[^0-9.]*\([0-9.]*\).*/\1/')
            - |
              if version_gt $GO_VERSION $CURRENT_GO_VERSION; then
                echo "Updating go version from $CURRENT_GO_VERSION to $GO_VERSION ..."
                sudo rm -rf /usr/bin/go
                sudo rm -rf /usr/local/go
                sudo rm -rf /usr/local/bin/go
                sudo rm -rf /usr/local/golang
                sudo rm -rf $GOROOT $GOPATH $GOBIN
                wget https://go.dev/dl/go$GO_VERSION.linux-amd64.tar.gz
                sudo tar -C /usr/local -xzf go$GO_VERSION.linux-amd64.tar.gz
                export GOROOT=/usr/local/go
                export PATH=$PATH:/usr/local/go/bin
              fi
            - export GOBIN=$HOME/go/bin
            - 'export PATH=$PATH:$GOBIN'
            - checkout
            - go version
            - go env GOBIN
            - 'curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOBIN) $GOLANGCI_LINT_VERSION'
            - 'golangci-lint run --no-config --disable-all --enable gosimple,errcheck,govet,unused,goconst,godot --timeout 3m'
      prologue:
        commands:
          - '# This script contains commands to be executed by the CI tool.'
          - NPROC=$(nproc)
          - GO_VERSION=1.19.4
          - PROTOC_VERSION=21.12
          - PROTOC_GEN_VERSION=v1.28.1
          - PROTOC_GRPC_VERSION=v1.2.0
          - GOLANGCI_LINT_VERSION=v1.52.1
  - name: Modified Tests
    dependencies:
      - Setup
    task:
      jobs:
        - name: Tests on Modified modules
          commands:
            - checkout
            - echo "Running modified tests...."
            - echo "" > coverage.txt
            - |
              # Get the list of modified Go files
              MODIFIED_FILES=$(git diff --name-only --diff-filter=AM | grep '\.go$')

              # Extract the unique Go module names from modified files
              MODIFIED_MODULES=$(go list -e -f '{{.Module.Path}}' $(dirname $MODIFIED_FILES) | sort -u)

              # Run tests for modified modules
              for module in $MODIFIED_MODULES; do
                go test -mod=vendor -v -race -tags test -coverprofile=profile.out -covermode=atomic "$module/..."
                if [ -f profile.out ]; then
                  cat profile.out >> coverage.txt
                  rm profile.out
                fi
              done     
  - name: Push
    dependencies:
      - Modified Tests
    task:
      jobs:
        - name: Push
          commands:
            - checkout
            - |
              if [ -n "$BRANCH_NAME" ] && [ "$BRANCH_NAME" = "master" ]; then
                echo "Pushing Docker images..."
                make -j$NPROC latest
              fi            
after_pipeline:
  task:
    jobs:
      - name: Pipeline report
        commands:
          - test-results gen-pipeline-report
